#!/usr/bin/env node
const yargs = require('yargs');
const path = require('path');
const App = require('../dist/app');
const validate = require('../dist/CommandLine/utils/validate');
const {checkVersion} = require('../dist/helper/checkVersion');
const {log, warnLog} = require('../dist/helper/util');
const pkg = require('../package.json');
const updateNotifier = require('update-notifier');

// Checking node version is the first time to be done
const MIN_SUPPORT_NODE_VERSION = '6.4.0';
checkVersion({
    version: process.version,
    versionLimit: MIN_SUPPORT_NODE_VERSION,
    notify: [
        `Expect Node.js version to be higher than v${MIN_SUPPORT_NODE_VERSION}!`,
        'Please install latest version\'s Node.js.'
    ]
});

updateNotifier({ pkg }).notify();

const argv = yargs
    .usage('Usage: foxman [options]')
    .alias('C', 'config')
    .alias('C', 'c')
    .describe('C', '配置文件路径')
    .default('C', 'foxman.config.js')

    .alias('P', 'proxy')
    .describe('P', '使用配置中的代理，填写代理名即可')
    .default('P', false)

    .alias('p', 'port')
    .describe('p', '指定临时端口')
    .default('p', false)

    .alias('U', 'update')
    .alias('U', 'u')
    .describe('U', '是否远程nei中拉取接口信息')
    .default('U', false)

    // .command('tpl', 'code generate', function (yargs) {
    //     return yargs.option('T', {
    //         alias: 'type',
    //         default: 'FoxmanConfig'
    //     }).option('W', {
    //         alias: 'where',
    //         default: 'foxman.config.js'
    //     })
    // })

    // .command('lint', 'eslint for foxman', function (yargs) {
    //     return yargs.option('T', {
    //         alias: 'type',
    //         default: 'FoxmanConfig'
    //     }).option('W', {
    //         alias: 'where',
    //         default: 'foxman.config.js'
    //     })
    // })

    .alias('V', 'version')
    .alias('V', 'v')
    .describe('V', 'Show version')
    .version(() => `v${pkg.version}`)

    .help('H')
    .alias('H', 'help')
    .alias('H', 'h')

    .example('foxman -C ./config.json -P local -U')
    .argv;

let config;
const configPath = path.join(process.cwd(), argv.config);

try {
    config = require(configPath);
} catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
        if (~err.toString().indexOf(configPath)) {
            warnLog('Please add foxman.config.js in current directory.');
            warnLog('Also you can appoint your special name,');
            warnLog('use command \'foxman --config yourfoxman.config.js\'.');
            warnLog('See more in command \'foxman --help\'');

        } else {
            warnLog('Make sure you have the latest version of node.js and foxman.');
            warnLog(`If you do, this is most likely a problem with the plugins used in ${path.join(process.cwd(), 'foxman.config.js')},`);
            warnLog('not with foxman itself');
            console.log('\n');
            console.log(err.stack);
            console.log('\n');
            warnLog('You can try \'npm install\' or check the foxman.config.js');
        }
    } else {
        warnLog('Maybe be a problem with foxman.config.js, check it or contact us(http://github.com/kaola-fed/foxman/issues)');
        console.log(err);
    }

    process.exit(1);
}

if (argv.port) {
    config.server.port = parseInt(argv.port);
}
if (!config.server.templatePaths)  {
    config.server.templatePaths = {};
}

let res = validate(config);
if (res !== true) {
    log(res);
}

const upgrade = config.upgrade;
if ((upgrade !== undefined)
    && (upgrade.version !== undefined)) {
    let notify = [`Expect foxman version to be higher than v${upgrade.version} in current project!`];

    if (upgrade.notify
        && upgrade.notify.length > 0) {
        notify = upgrade.notify;
    }

    checkVersion({
        version: pkg.version,
        versionLimit: upgrade.version,
        notify: [
            ...notify,
            'Please install latest version:',
            '$ npm i -g foxman',
            'And re-install all dependencies in current working directory',
            'For more release information, head to https://github.com/kaola-fed/foxman/releases ;-)'
        ]
    });
}

App(Object.assign({}, config, {argv, configPath}));
